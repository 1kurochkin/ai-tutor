// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  files File[]
  chats Chat[]

  @@map("User")
}

model File {
  id            String   @id @default(cuid())
  filename      String
  originalName  String
  url           String
  fileSize      Int
  mimeType      String
  extractedText String?  @db.Text // Full text content for AI context
  pageCount     Int?
  uploadedAt    DateTime @default(now())

  // Foreign keys
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relations
  chats Chat[]

  @@map("File")
}

model Chat {
  id        String   @id @default(cuid())
  title     String? // Auto-generated or user-set title
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  userId String
  fileId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  file   File   @relation(fields: [fileId], references: [id], onDelete: Cascade)

  // Relations
  messages Message[]

  @@map("Chat")
}

model Message {
  id          String      @id @default(cuid())
  content     String      @db.Text
  role        MessageRole // 'user' | 'assistant'
  createdAt   DateTime    @default(now())
  navigation  Int?
  annotations String?

  // Foreign keys
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@map("Message")
}

enum MessageRole {
  user
  assistant
}
